version = 3.8.0

# runner.dialect = Scala3
# runner.dialect = Scala213Source3
runner.dialect = scala3

fileOverride {
    ".sbt" {
          runner.dialect = sbt1
    }
}

maxColumn = 96

# align.preset = more
align.preset                   = most
#align.preset                   = none
align.multiline                = true
align.arrowEnumeratorGenerator = true
align.openBracketDefnSite      = false
align.openParenTupleSite       = false

align.tokens."+" = [
  {owner = "Term.ApplyInfix"},
  {code = "%",      owner = "Term.ApplyInfix"},
  {code = "%%",     owner = "Term.ApplyInfix"},
  {code = "cross",  owner = "Term.ApplyInfix"},
  {code = ":=",     owner = "Term.ApplyInfix"},
  {code = "+=",     owner = "Term.ApplyInfix"},
  {code = "++=",    owner = "Term.ApplyInfix"},
  {code = "--=",    owner = "Term.ApplyInfix"},
  {code = ">|",     owner = "Term.ApplyInfix"},
  {code = "|",      owner = "Term.ApplyInfix"},
  {code = "&",      owner = "Term.ApplyInfix"},
  {code = "=>",     owner = "Case"},
  {code = ":",     owners = [{ regex = "Term\\.Param", parents = [ "Ctor\\.Primary" ] }]}
  {code = ":",     owners = [{ parents = [ "Defn\\." ] }]}

  # {code = "withSources",    owner = "Term.ApplyInfix"}
  # {code = "<-",     owner = "Term.ApplyInfix"},
]

runner.optimizer.forceConfigStyleMinArgCount  = 4

newlines.alwaysBeforeElseAfterCurlyIf         = true
newlines.alwaysBeforeMultilineDef             = false
newlines.source                               = keep
newlines.afterCurlyLambda                     = preserve
newlines.afterCurlyLambdaParams               = squash
newlines.beforeCurlyLambdaParams              = multiline
newlines.implicitParamListModifierForce       = []
# newlines.implicitParamListModifierForce       = [before, after]
# newlines.implicitParamListModifierForce    = [before]
newlines.avoidForSimpleOverflow               = [punct]
# newlines.topLevelStatements                   = [before, after]
# newlines.topLevelStatements                   = [before]
newlines.topLevelStatements                   = []

newlines.topLevelStatementBlankLines          = [
  { regex = "^Import", minBreaks = 0, blanks { after = 1 } },
  { regex = "extension", minBreaks = 2, blanks { beforeEndMarker = 1 } },
]

rewrite.rules                                 = [
                                                  RedundantBraces,
                                                  RedundantParens,
                                                  SortModifiers,
                                                  SortImports,
                                                  Imports
                                                ]

rewrite.scala3.convertToNewSyntax             = true
rewrite.scala3.removeOptionalBraces           = true
rewrite.redundantBraces.stringInterpolation   = true
rewrite.redundantBraces.parensForOneLineApply = true
rewrite.redundantBraces.generalExpressions    = true
rewrite.redundantBraces.ifElseExpressions     = true
rewrite.redundantBraces.methodBodies          = true
rewrite.redundantBraces.parensForOneLineApply = false
rewrite.imports.expand                        = false
rewrite.imports.sort                          = scalastyle
rewrite.trailingCommas                        = keep

comments.wrap                                 = trailing
comments.wrapStandaloneSlcAsSlc               = true

continuationIndent.extendSite                 = 4
continuationIndent.withSiteRelativeToExtends  = 2

docstrings.oneline                            = fold
docstrings.style                              = SpaceAsterisk
docstrings.wrap                               = yes

spaces.neverAroundInfixTypes                  = ["##"]
spaces.inImportCurlyBraces                    = true
spaces.afterSymbolicDefs                      = true
spaces.inInterpolatedStringCurlyBraces        = true

# binPack.parentConstructors                    = OnelineIfPrimaryOneline
binPack.parentConstructors                    = OneLine

includeNoParensInSelectChains                 = true

indent.significant                             = 2
rewriteTokens                                 = {
  "⇒": "=>",
  "→": "->",
  "←": "<-"
}

rewrite.scala3.convertToNewSyntax             = true
rewrite.scala3.removeOptionalBraces           = true
rewrite.scala3.insertEndMarkerMinLines        = 25

literals.long                                 = Upper
literals.float                                = Lower
literals.hexPrefix                            = Lower
literals.scientific                           = Lower

includeCurlyBraceInSelectChains               = true
includeNoParensInSelectChains                 = true
fileOverride {
  "glob:**/modules/scala/scala-interpreter/src/main/scala-3/**" {
     runner.dialect = scala3
  }
  "glob:**/modules/shared/logger/src/main/scala-3/**" {
     runner.dialect = scala3
  }
}
